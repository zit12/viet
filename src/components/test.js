import React, { useState, useEffect } from "react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import socket from "../socket";
import WaitingRoomPage from "./WaitingRoomPage"; // Import trang ph√≤ng ch·ªù


function CreateRoom() {
  const [name, setName] = useState("");
  const [info, setInfo] = useState(false);
  const [roomId, setRoomId] = useState(""); // ID ph√≤ng
  const [players, setPlayers] = useState([]); // Danh s√°ch ng∆∞·ªùi ch∆°i
  const [isHost, setIsHost] = useState(false); // X√°c ƒë·ªãnh ng∆∞·ªùi t·∫°o ph√≤ng

  // Khi ng∆∞·ªùi d√πng t·∫°o ph√≤ng
  const handleCreateRoom = () => {
    if (!name) {
      toast.error("H√£y nh·∫≠p t√™n tr∆∞·ªõc khi t·∫°o ph√≤ng!");
      return;
    }
    socket.emit("createRoom", name); // G·ª≠i y√™u c·∫ßu t·∫°o ph√≤ng
  };


  // L·∫Øng nghe s·ª± ki·ªán ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o
  useEffect(() => {
    socket.on("roomCreated", (roomId) => {
      setRoomId(roomId);
      setInfo(true);
      setIsHost(true); // ƒê·∫∑t ng∆∞·ªùi t·∫°o ph√≤ng l√† host
      toast.success(`Ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! ID: ${roomId}`);
    });

    // L·∫Øng nghe s·ª± ki·ªán khi c√≥ ng∆∞·ªùi tham gia
    socket.on("updatePlayers", (playersList) => {
      console.log("Players List updated in CreateRoom:", playersList); // Ki·ªÉm tra danh s√°ch ng∆∞·ªùi ch∆°i
      setPlayers(playersList); // C·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi ch∆°i
    });

    // L·∫Øng nghe th√¥ng b√°o t·ª´ server
    socket.on("message", (message) => {
      toast(message, { position: "top-right", autoClose: 3000, theme: "dark" });
    });

    return () => {
      socket.off("roomCreated");
      socket.off("updatePlayers");
      socket.off("message");
    };
  }, []);

  console.log("Room ID in CreateRoom:", roomId);
  console.log("Players in CreateRoom:", players);
  console.log("Is Host in CreateRoom:", isHost);

  return (
    <div className="App">
      <ToastContainer />
      {!info ? (
        <div className="join-div">
          <h1>QuizClash üí°</h1>
          <input
            required
            placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <button onClick={handleCreateRoom} className="create-btn">
            T·∫°o Ph√≤ng
          </button>
        </div>
      ) : (
        <WaitingRoomPage roomId={roomId} players={players} isHost={isHost} /> // Hi·ªÉn th·ªã trang ph√≤ng ch·ªù
      )}
    </div>
  );
}

export default CreateRoom;
